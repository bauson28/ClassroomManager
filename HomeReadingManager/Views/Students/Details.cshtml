@model HomeReadingManager.Models.Student

@{
    ViewBag.Title = "Student Details";
}
@using PagedList.Mvc;
@using PagedList;

<link href="/Content/PagedList.css" rel="stylesheet" type="text/css" />

<h2>Student Details</h2>

<div>
    <hr />
    <dl class="dl-horizontal">

        <dd>
            @Html.DisplayFor(model => model.FirstName)
            @Html.DisplayFor(model => model.LastName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Student_Id)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Student_Id)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Class.ClassDesc)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Class.ClassDesc)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Level.ReadLevel)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Level.ReadLevel)
        </dd>

        <dt>

        </dt>
        <dd>
            @if (Model.Inactive == true)
            { <text>Inactive
            </text>}
            @* @Html.DisplayFor(model => model.Inactive)*@
        </dd>
    </dl>

</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Student_Id, classFilter = ViewBag.ClassFilter, searchString = ViewBag.SearchString, lastOrder = ViewBag.SortColumn, page = ViewBag.Page }) &nbsp;
    @*@Html.ActionLink("Back to List", "Index", new { classFilter = ViewBag.ClassFilter, searchString = ViewBag.SearchString, lastOrder = ViewBag.SortColumn })*@
    @Html.ActionLink("Back to List", "Index", new { classList = ViewBag.ClassFilter, searchString = ViewBag.SearchString, lastOrder = ViewBag.SortColumn, page = ViewBag.Page })
</p>
<table class="table">
    <tr>
        <th>
            Year
        </th>
        <th>
            Books borrowed
        </th>
        @*<th>
                 Average level
            </th>*@
    </tr>

    @foreach (var year in ViewBag.LoansSummary)
    {
        <tr>
            <td>
                @year.Year
            </td>
            <td>
                @year.BookCount
            </td>
            @*<td>
                   @year.AvLevel
                </td>*@
        </tr>
    }
</table>

<dt>
    @Html.DisplayNameFor(model => model.StudentContacts)
</dt>
<dd>

    <table class="table">
        <tr>
            <th>Title</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Relationship</th>
            <th>Phone</th>
        </tr>
        @foreach (var item in Model.StudentContacts)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Parent.ContactTitle.Salutation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Parent.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Parent.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Relationship.Relationship1)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Parent.Phone)
                </td>
            </tr>
        }
    </table>
</dd>
<h4>Student Borrowing</h4>
<table class="table">
    <tr>
        <th>

            @* @Html.DisplayColumnNameFor(Model.Loans, m => m.Product.Title)*@
            @Html.DisplayNameFor(model => model.Loans.FirstOrDefault().Product.Title)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Loans.FirstOrDefault().Product.Level.ReadLevel)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Loans.FirstOrDefault().BorrowDate)

            @* @Html.DisplayColumnNameFor(Model.Loans, m => m.BorrowDate)*@

        <th>
            @*@Html.DisplayColumnNameFor(Model.Loans, m => m.ReturnDate)*@
            @Html.DisplayNameFor(model => model.Loans.FirstOrDefault().ReturnDate)

        </th>

    </tr>


    @foreach (var loan in ViewBag.LoansByPage)
    {

        <tr>
            <td>
                @loan.Product.Title
            </td>
            <td>
                @if (loan.Product.Levels_Id == null)
                { <text>--
                </text>}
                else
                { @loan.Product.Level.ReadLevel}
            </td>
            <td>
                @loan.BorrowDate.ToString("dd-MM-yyyy")
            </td>
            <td>
                @if (loan.ReturnDate == null)
                { <text>On loan
                </text>}
                else
                {
                    @loan.ReturnDate.ToString("dd-MM-yyyy")
                }
        </td>
    </tr>
    }
</table>
@Html.PagedListPager((IPagedList)ViewBag.LoansByPage, page => Url.Action("Details", new { page }))









