@model HomeReadingManager.ViewModels.TeacherCreate

@{
    ViewBag.Title = "Create Teacher";
  
}

<h2>Create New Teacher or User</h2>


@using (Html.BeginForm("Create", "Teachers", FormMethod.Post, new { id = "thisForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
      
        <hr />
        @Html.HiddenFor(model => model.SortOrder)
        @Html.HiddenFor(model => model.Ascending)
        @Html.HiddenFor(model => model.Page)
        @Html.HiddenFor(model => model.LibraryId, new { @id = "libraryId" })
        @Html.HiddenFor(model => model.TeacherId, new { @id = "teacherId" })
        @Html.HiddenFor(model => model.Inactive)
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div id="dvMessages" class="textRed"></div>
        <div class="form-group">
            @Html.LabelFor(model => model.Title_Id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Title_Id, new SelectList(Model.Salutations, "Id", "Title", Model.Title_Id), "Please select...", new { @id = "ddlTitleId" })
                @Html.ValidationMessageFor(model => model.Title_Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @id = "firstName" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @id = "lastName" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @id = "email" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Role, "Role", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Role, new SelectList(Model.Roles, "Key", "Value"), new { @id = "ddlRole" })  @*, Model.Role,*@
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Administrator, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Administrator)
                    @Html.ValidationMessageFor(model => model.Administrator, "", new { @class = "text-danger" })
                    <p class="textItalic">Warning - there should only be two (or possibly three) administrators at your school.</p>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>

            <div class="form-group">
                <div class="col-md-offset-3 col-md-9" style="margin-top:6px">
                    <input type="button" value="Create teacher" class="btn btn-success" id="btnCreate" />
                    @*<a onclick="$('#thisForm').formReset(); return false;">Reset</a>*@

                    <!-- a reset input, this handles the the form reset but not validation clearing-->
                   <input type="reset" value="Reset" class="form-reset" />
                    @*<input onclick="$('#thisForm').resetValidation()" type="reset" value="Reset" class="form-reset" />*@
                </div>
            </div>
        </div>
    </div>

    <div>
        @Html.ActionLink("Back to list", "Index")
    </div>
}

@section Scripts
{

    @Scripts.Render("~/bundles/jqueryval")

   <script type="text/javascript">
       // $(document).ready(function () {

            $(function () {
                $('#btnCreate').on('click', function () {
                   var val = $('#thisForm').validate();
                    val.showErrors();
                    if ($('#thisForm').valid()) {
                        firstName = $('#firstName').val();
                        lastName = $('#lastName').val();
                        titleId = $('#ddlTitleId').val();
                        if (!titleId)
                            titleId = 1;
                        role = $('#ddlRole').val();
                        libraryId = $('#libraryId').val();
                        email = $('#email').val();
                       
                        $.ajax({
                            type: 'GET',
                            url: "@Url.Content("~/Teachers/CreateTeacher")",
                            data: {
                                lastName: lastName,
                                firstName: firstName,
                                titleId: titleId,
                                role: role,
                                libraryId: libraryId,
                                email: email
                            },
                            dataType: 'json',
                            success: function (result) {
                                if (result.Success) {
                                   //baf need to show message
                                    var id = result.Result;
                                    $('#teacherId').val(id);
                                    $("#thisForm").submit();
                                }
                                else {
                                    $('#dvMessages').html(result.Result);
                                }
                            },
                            error: function () {
                                $('#dvMessages').html('Failed to write to file. Please try again.');
                            }
                        });
                    }
                  
                        
                  });
            });


       $(function () {
           //$('.form-reset').live('click', function () {
           //    $(this).formReset();
           //    return false;
           //});

           $('.form-reset').on('click', function () {
               
               myForm = $('#thisForm');
               myForm.validate().resetForm();

               //reset unobtrusive validation summary, if it exists
               myForm.find("[data-valmsg-summary=true]")
                   .removeClass("validation-summary-errors")
                   .addClass("validation-summary-valid")
                   .find("ul").empty();

               //reset unobtrusive field level, if it exists
               myForm.find("[data-valmsg-replace]")
                   .removeClass("field-validation-error")
                   .addClass("field-validation-valid")
                   .empty();
               myForm.removeData('unobtrusiveValidation');
               //myForm.removeData('validator');
               //myForm.validator.unobtrusive.parse($('form'));
               $('#dvMessages').val('');
           });
       })
       
        //});
    </script>
}

