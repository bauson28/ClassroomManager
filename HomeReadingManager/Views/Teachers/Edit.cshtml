@model HomeReadingManager.ViewModels.TeacherCreate

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Teacher/User</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@Html.DisplayFor(model => model.FullName)</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.TeacherId)

        <div class="form-group">
            @Html.LabelFor(model => model.Title_Id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Title_Id, new SelectList(Model.Salutations, "Id", "Title", Model.Title_Id), "Please select...", new { @id = "ddlTitleId" })
                @Html.ValidationMessageFor(model => model.Title_Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
             </div>
        </div>

        @if (Model.IsAdministrator)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Role, "Role", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Role, new SelectList(Model.Roles, "Key", "Value"), new { @id = "ddlRole" })  @*, Model.Role,*@
                    @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                </div>
            </div>
                    
            <div class="form-group">
                @Html.LabelFor(model => model.Administrator, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Administrator)
                        @Html.ValidationMessageFor(model => model.Administrator, "", new { @class = "text-danger" })
                        <p class="textItalic">Warning - there should only be two (or possibly three) administrators at your school.</p>
                    </div>
                </div>
            </div>
       
            <div class="form-group">
                @Html.LabelFor(model => model.Inactive, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Inactive)
                        @Html.ValidationMessageFor(model => model.Inactive, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save changes" class="btn btn-success" id="btnSave" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to list", "Index", new { sortOrder = Model.SortOrder, asc = Model.Ascending, page = Model.Page, libraryId = Model.LibraryId })
</div>

@section Scripts
{

    @Scripts.Render("~/bundles/jqueryval")

}
